// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanType {
  None
  Monthly
  Annual
}

enum StatusPlan {
  NoPlan
  Activated
  Canceled
}

model User {
  id                       String         @id @default(uuid())
  name                     String
  email                    String         @unique
  password                 String
  avatarUrl                String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  subscriptionStatus       StatusPlan     @default(NoPlan)
  stripeCustomerId         String?
  stripeSubscriptionStatus String?
  stripeSubscriptionId     String?
  signals                  Signal[]       @relation
  subscriptions            Subscription[] @relation
  coupleAsUser1            Couple?        @relation("CoupleUser1")
  coupleAsUser2            Couple?        @relation("CoupleUser2")
  Tokens                   Tokens[]       @relation("Tokens")
  invites                  CoupleInvite[] @relation("Inviter")
  Memory                   Memory[]
  Questions                Question[]

  @@map("users")
}

model Couple {
  id                 String       @id @default(uuid())
  relationshipStatus String
  user1              User         @relation("CoupleUser1", fields: [user1Id], references: [id])
  user1Id            String       @unique
  user2              User         @relation("CoupleUser2", fields: [user2Id], references: [id])
  user2Id            String       @unique
  createdAt          DateTime     @default(now())
  signals            Signal[]     @relation
  aiResponses        AIResponse[] @relation
  Memory             Memory[]

  @@map("couples")
}

model CoupleInvite {
  id           String    @id @default(uuid())
  inviterId    String
  inviteeEmail String
  token        String    @unique
  expiresAt    Int
  used         Boolean   @default(false)
  createdAt    DateTime? @default(now())
  inviter      User      @relation("Inviter", fields: [inviterId], references: [id])

  @@map("couple_invites")
}

model Signal {
  id         String       @id @default(uuid())
  userId     String
  coupleId   String
  emotion    String
  note       String?
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id])
  couple     Couple       @relation(fields: [coupleId], references: [id])
  AIResponse AIResponse[]

  @@map("signals")
}

model AIResponse {
  id        String   @id @default(uuid())
  coupleId  String
  signalId  String?
  summary   String
  advice    String
  challenge String?
  createdAt DateTime @default(now())
  couple    Couple   @relation(fields: [coupleId], references: [id])
  signal    Signal?  @relation(fields: [signalId], references: [id])

  @@map("ai_responses")
}

model Question {
  id          String   @id @default(uuid())
  coupleId    String
  userId      String
  question    String
  answer      String?
  wasAnswered Boolean  @default(false)
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])

  @@map("questions")
}

model Subscription {
  id        String     @id @default(uuid())
  userId    String
  status    StatusPlan @default(NoPlan)
  planType  PlanType   @default(None)
  expiresIn DateTime
  user      User       @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Tokens {
  id        String  @id @default(uuid())
  used      Boolean @default(false)
  type      String
  user_id   String
  user      User    @relation("Tokens", fields: [user_id], references: [id])
  expiresIn Int

  @@map("tokens")
}

model Memory {
  id              String   @id @default(uuid())
  title           String
  description     String
  avatarUrl       String?
  createdAt       DateTime @default(now())
  coupleId        String
  couple          Couple   @relation(fields: [coupleId], references: [id])
  createdByUserId String
  createdByUser   User     @relation(fields: [createdByUserId], references: [id])

  @@map("memories")
}
